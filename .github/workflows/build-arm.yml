name: "build-arm"

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    permissions:
      contents: write

    concurrency:
      group: ${{ github.workflow }}-${{ matrix.version }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        version: [al2023, ubuntu2204]
        include:
          - version: al2023
            container: andywick/arkime-build-al2023-arm64:5.0.0-3
            buildopt: "--kafka"
            package: rpm
            ja4plus: true

          - version: ubuntu2204
            container: andywick/arkime-build-22-arm64:5.0.0-3
            buildopt: "--nothirdparty --kafka"
            package: deb

    runs-on: buildjet-2vcpu-ubuntu-2204-arm

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: thirdparty
        run: |
          if [ -d "/thirdparty" ]; then
            ln -s /thirdparty .
          fi
          git config --global --add safe.directory `pwd`

      - name: build and install
        run: |
          echo "ALW ${{ github.run_id }} ${{ github.run_number }} ${{ github.run_attempt }}"
          ./easybutton-build.sh ${{ matrix.buildopt }} --rminstall
          export PATH=/opt/arkime/bin:$PATH
          make install

      - name: lint
        run: |
          export PATH=/opt/arkime/bin:$PATH
          npm run lint
          cp -r capture/plugins/lua/samples /opt/arkime/lua

      - name: capture tests
        run: |
          (cd tests; ./tests.pl)

      - name: package arch
        if: ${{ matrix.package == 'arch' }}
        run: |
          gem install --no-document fpm rexml
          export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
          /root/.local/share/gem/ruby/3.0.0/bin/fpm -s dir -t pacman -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration ${{ github.run_id }} --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libmaxminddb -d libpcap -d yara -d perl-http-message -d perl-lwp-protocol-https -d perl-json -d libnet -d lua -d zstd -d openssl-1.1 -d pcre -p arkime-${ARKIME_VERSION}-${{github.run_id}}_${{matrix.version}}-aarch64.pkg.tar.zst /opt/arkime
          ls -l *.zst
          mv *.zst arkime-main.${{matrix.version}}.aarch64.pkg.tar.zst

      - name: package rpm
        if: ${{ matrix.package == 'rpm' }}
        run: |
          export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
          fpm -s dir -t rpm -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration ${{ github.run_id }} --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https --rpm-rpmbuild-define "_build_id_links none" -p arkime-${ARKIME_VERSION}-${{github.run_id}}.${{matrix.version}}.aarch64.rpm /opt/arkime
          ls -l *.rpm
          mv *.aarch64.rpm arkime-main.${{matrix.version}}.aarch64.rpm
          aws s3 cp --quiet *.aarch64.rpm s3://files.molo.ch/ --acl public-read
          aws s3api put-object-acl --bucket files.molo.ch --key arkime-main.${{matrix.version}}.aarch64.rpm --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: package deb
        if: ${{ matrix.package == 'deb' }}
        run: |
          export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
          fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration ${{ github.run_id }} --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev -p arkime_${ARKIME_VERSION}-${{github.run_id}}.${{matrix.version}}_arm64.deb /opt/arkime
          ls -l *.deb
          mv *.deb arkime-main_${{matrix.version}}_arm64.deb
          aws s3 cp --quiet *_arm64.deb s3://files.molo.ch/ --acl public-read
          aws s3api put-object-acl --bucket files.molo.ch --key arkime-main_${{matrix.version}}_arm64.deb --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ja4plus
        if: ${{ matrix.ja4plus }}
        run: |
          (cd .. ; git clone https://github.com/arkime/ja4)
          cp ../ja4/ja4plus.c capture/plugins
          (cd capture/plugins; make)
          mv capture/plugins/ja4plus.so ja4plus.arm64.so
          rm -f capture/plugins/ja4plus.c

      - name: upload github
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          tag_name: last-commit
          draft: false
          prerelease: true
          generate_release_notes: false
          files: |
            *.deb
            *.so
            *.rpm
            *.zst

  slack:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: send
        env:
          SLACK_URL: ${{ secrets.SLACK_URL }}
        run: |
          echo "Sending msg"
          export ARKIME_VERSION=`grep AC_INIT configure.ac | sed "s/.*\[\(.*\)\].*$/\1/"`
          echo ARKIME_VERSION: $ARKIME_VERSION
          MSG=`git log -1 --format=%s`
          BODY="{\"icon_emoji\": \":sushi:\", \"username\": \"GitAction\", \"text\":\"ARM worked: $GIT_BRANCH - arkime-$ARKIME_VERSION-$SD_BUILD_ID - $MSG\"}"
          curl -XPOST -H "Content-type: application/json" --data "$BODY" $SLACK_URL


ul.nav.nav-pills.mb-3
  if (session.rootId)
    li.nav-item
      a.nav-link.cursor-pointer(@click='allSessions(' + '"' + session.rootId + '"' + ', ' + session.firstPacket + ')') All Sessions
    li.nav-item
      a.nav-link(href=session.node + '/pcap/' + session.id + '.pcap', target="_blank", download=session.id + '-segment.pcap') Download Segment Pcap
    li.nav-item
      a.nav-link(href=session.node + '/entirePcap/' + session.rootId + '.pcap', target="_blank", download=session.id + '.pcap') Download Entire Pcap
  else
    li.nav-item
      a.nav-link(href=session.node + '/pcap/' + session.id + '.pcap', target="_blank", v-has-permission="'!disablePcapDownload'", v-b-tooltip.hover.bottom.d300="'Download the PCAP file for this session.'", download=session.id + '.pcap')
        span.fa.fa-download
        | &nbsp;Download PCAP
  li.nav-item
    a.nav-link(href=session.node + '/raw/' + session.id + '?type=src', target="_blank", v-b-tooltip.hover.bottom.d300="'Download the raw source packets for this session.'", download=session.id + '-src-raw')
      span.fa.fa-arrow-circle-up
      | &nbsp;Source Raw
  li.nav-item
    a.nav-link(href=session.node + '/raw/' + session.id + '?type=dst', target="_blank", v-b-tooltip.hover.bottom.d300="'Download the raw destination packets for this session.'", download=session.id + '-dst-raw')
      span.fa.fa-arrow-circle-down
      | &nbsp;Destination Raw
  li.nav-item
    a.nav-link.cursor-pointer(@click="openPermalink", v-b-tooltip.hover.bottom.d300="'Navigate to the sessions page containing just this session. You can use this link to share this session with other users.'")
      span.fa.fa-link
      | &nbsp;Link
  b-dropdown.nav-item(text="Actions", size="sm")
    b-dropdown-item(@click="exportPCAP", v-has-permission="'!disablePcapDownload'")
      | Export PCAP
    b-dropdown-item(@click="addTags")
      | Add Tags
    b-dropdown-item(@click="removeTags", v-has-permission="'removeEnabled'")
      | Remove Tags
    b-dropdown-item(@click="removeData()", v-has-permission="'removeEnabled'")
      | Remove Data
    b-dropdown-item(v-for="(value, key) in molochclusters", key="key", @click="sendSession(key)")
      | Send Session to {{ value.name }}

div.mb-2
  moloch-toast(:message="message", :type="messageType", :done="messageDone")

div.mb-2.mr-5
  - var sessions = [{id: session.id}];
  div(v-if="form === 'add:tags'")
    moloch-tag-sessions(:sessions=sessions, :add="true", :done="actionFormDone", :single="true")
  div(v-if="form === 'remove:tags'")
    moloch-tag-sessions(:sessions=sessions, :add="false", :done="actionFormDone", :single="true")
  div(v-if="form === 'export:pcap'")
    moloch-export-pcap(:sessions=sessions, :done="actionFormDone")
  div(v-if="form === 'remove:data'")
    moloch-remove-data(:sessions=sessions, :done="actionFormDone", :single="true")
  div(v-if="form === 'send:session'")
    moloch-send-sessions(:sessions=sessions, :done="actionFormDone", :cluster="cluster")

dl
  dt Id
  dd
    +clickableValue('id', Db.sid2Id(session.id))
    if (session.rootId)
      strong.ml-4 Root Id:
      +clickableValue('rootId', session.rootId)
    if (session.network && session.network.community_id)
      strong.ml-4 Community Id:
      +clickableValue('communityId', session.network.community_id)

  dt Time
  dd
    +clickableValue('starttime', session.firstPacket)
    strong -&nbsp;
    +clickableValue('stoptime', session.lastPacket)

  dt
    +clickableLabel('node', 'Node')
  dd
    +clickableValue('node', session.node)

  +arrayList(session, "protocol", "Protocols", "protocols")

  dt
    +clickableLabel('ip.protocol', 'IP Protocol')
  dd
    +clickableValue('ip.protocol', session.ipProtocol)

  +arrayList(session, "user", "Users", "user")

  +arrayList(session, "asset", "Assets", "asset")

  if (session.source.bytes || session.destination.bytes)
    dt
      b-dropdown.clickable-label(text="Src", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('packets.src', 0)")
          | Export Unique Src Packets
        b-dropdown-item(@click="exportUnique('packets.src', 1)")
          | Export Unique Src Packets with counts
        b-dropdown-item(@click="openSpiGraph('packets.src')")
          | Open Src Packets SPI Graph
        b-dropdown-item(@click="fieldExists('packets.src', '==')")
          | Add Src Packets EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('bytes.src', 0)")
          | Export Unique Src Bytes
        b-dropdown-item(@click="exportUnique('bytes.src', 1)")
          | Export Unique Src Bytes with counts
        b-dropdown-item(@click="openSpiGraph('bytes.src')")
          | Open Src Bytes SPI Graph
        b-dropdown-item(@click="fieldExists('bytes.src', '==')")
          | Add Src Bytes EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('databytes.src', 0)")
          | Export Unique Src Databytes
        b-dropdown-item(@click="exportUnique('databytes.src', 1)")
          | Export Unique Src Databytes with counts
        b-dropdown-item(@click="openSpiGraph('databytes.src')")
          | Open Src Databytes SPI Graph
        b-dropdown-item(@click="fieldExists('databytes.src', '==')")
          | Add Src Databytes EXISTS! to query
    dd
      strong.medium.ml-1 Packets
      +clickableValue('packets.src', session.source.packets)
      strong.medium.ml-4 Bytes
      +clickableValue('bytes.src', session.source.bytes)
      strong.medium.ml-4 Databytes
      +clickableValue('databytes.src', session.client.bytes)

    dt
      b-dropdown.clickable-label(text="Dst", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('packets.dst', 0)")
          | Export Unique Dst Packets
        b-dropdown-item(@click="exportUnique('packets.dst', 1)")
          | Export Unique Dst Packets with counts
        b-dropdown-item(@click="openSpiGraph('packets.dst')")
          | Open Dst Packets SPI Graph
        b-dropdown-item(@click="fieldExists('packets.dst', '==')")
          | Add Dst Packets EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('bytes.dst', 0)")
          | Export Unique Dst Bytes
        b-dropdown-item(@click="exportUnique('bytes.dst', 1)")
          | Export Unique Dst Bytes with counts
        b-dropdown-item(@click="openSpiGraph('bytes.dst')")
          | Open Dst Bytes SPI Graph
        b-dropdown-item(@click="fieldExists('bytes.dst', '==')")
          | Add Dst Bytes EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('databytes.dst', 0)")
          | Export Unique Dst Databytes
        b-dropdown-item(@click="exportUnique('databytes.dst', 1)")
          | Export Unique Dst Databytes with counts
        b-dropdown-item(@click="openSpiGraph('databytes.dst')")
          | Open Dst Databytes SPI Graph
        b-dropdown-item(@click="fieldExists('databytes.dst', '==')")
          | Add Dst Databytes EXISTS! to query
    dd
      strong.medium.ml-1 Packets
      +clickableValue('packets.dst', session.destination.packets)
      strong.medium.ml-4 Bytes
      +clickableValue('bytes.dst', session.destination.bytes)
      strong.medium.ml-4 Databytes
      +clickableValue('databytes.dst', session.server.bytes)

  if (session.source.mac)
    dt
      b-dropdown.clickable-label(text="Ethernet", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('mac.src', 0)")
          | Export Unique Src Mac
        b-dropdown-item(@click="exportUnique('mac.src', 1)")
          | Export Unique Src Mac with counts
        b-dropdown-item(@click="openSpiGraph('mac.src')")
          | Open Src Mac SPI Graph
        b-dropdown-item(@click="fieldExists('mac.src', '==')")
          | Add Src Mac EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('oui.src', 0)")
          | Export Unique Src OUI
        b-dropdown-item(@click="exportUnique('oui.src', 1)")
          | Export Unique Src OUI with counts
        b-dropdown-item(@click="openSpiGraph('oui.src')")
          | Open Src OUI SPI Graph
        b-dropdown-item(@click="fieldExists('oui.src', '==')")
          | Add Src OUI EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('mac.dst', 0)")
          | Export Unique Dst Mac
        b-dropdown-item(@click="exportUnique('mac.dst', 1)")
          | Export Unique Dst Mac with counts
        b-dropdown-item(@click="openSpiGraph('mac.dst')")
          | Open Dst Mac SPI Graph
        b-dropdown-item(@click="fieldExists('mac.dst', '==')")
          | Add Dst Mac EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('oui.dst', 0)")
          | Export Unique Dst OUI
        b-dropdown-item(@click="exportUnique('oui.dst', 1)")
          | Export Unique Dst OUI with counts
        b-dropdown-item(@click="openSpiGraph('oui.dst')")
          | Open Dst OUI SPI Graph
        b-dropdown-item(@click="fieldExists('oui.dst', '==')")
          | Add Dst OUI EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('vlan', 0)")
          | Export Unique VLan
        b-dropdown-item(@click="exportUnique('vlan', 1)")
          | Export Unique VLan with counts
        b-dropdown-item(@click="openSpiGraph('vlan')")
          | Open VLan SPI Graph
        b-dropdown-item(@click="fieldExists('vlan', '==')")
          | Add VLAN EXISTS! to query
    dd
      strong.medium.ml-1 Src Mac
      +arrayPrint(session.source, "mac", "mac.src", true)

      if (session.srcOui)
        strong.medium OUI
        +arrayPrint(session, "srcOui", "oui.src", true)

      strong.medium.ml-4 Dst Mac
      +arrayPrint(session.destination, "mac", "mac.dst", true)

      if (session.dstOui)
        strong.medium OUI
        +arrayPrint(session, "dstOui", "oui.dst", true)

      if (session.vlan)
        strong.medium.ml-4 VLan
        +arrayPrint(session, "vlan", "vlan")

  dt
    b-dropdown.clickable-label(text="Src IP/Port", size="sm", variant="default")
      b-dropdown-item(@click="exportUnique('ip.src', 0)")
        | Export Unique Src IP
      b-dropdown-item(@click="exportUnique('ip.src', 1)")
        | Export Unique Src IP with counts
      b-dropdown-item(@click="exportUnique('ip.src:port.src', 0)")
        | Export Unique Src IP#{sep}Port
      b-dropdown-item(@click="exportUnique('ip.src:port.src', 1)")
        | Export Unique Src IP#{sep}Port with counts
      b-dropdown-item(@click="openSpiGraph('ip.src')")
        | Open Src IPv6 SPI Graph
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('port.src', 0)")
        | Export Unique Src Port
      b-dropdown-item(@click="exportUnique('port.src', 1)")
        | Export Unique Src Port with counts
      b-dropdown-item(@click="openSpiGraph('port.src')")
        | Open Src Port SPI Graph
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('country.src', 0)")
        | Export Unique Src Country
      b-dropdown-item(@click="exportUnique('country.src', 1)")
        | Export Unique Src Country with counts
      b-dropdown-item(@click="openSpiGraph('country.src')")
        | Open Src Country SPI Graph
      b-dropdown-item(@click="fieldExists('country.src', '==')")
        | Add Src Country EXISTS! to query
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('source.as.full', 0)")
        | Export Unique Src ASN
      b-dropdown-item(@click="exportUnique('source.as.full', 1)")
        | Export Unique Src ASN with counts
      b-dropdown-item(@click="openSpiGraph('source.as.full')")
        | Open Src ASN SPI Graph
      b-dropdown-item(@click="fieldExists('source.as.full', '==')")
        | Add Src ASN EXISTS! to query
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('rir.src', 0)")
        | Export Unique Src RIR
      b-dropdown-item(@click="exportUnique('rir.src', 1)")
        | Export Unique Src RIR with counts
      b-dropdown-item(@click="openSpiGraph('rir.src')")
        | Open Src RIR SPI Graph
      b-dropdown-item(@click="fieldExists('rir.src', '==')")
        | Add Src RIR EXISTS! to query

  dd
    +ipPrint(session, session.source.ip, session.source.port, session.source.geo.country_iso_code, session.source.as.full, session.srcRIR, "src")

  dt
    b-dropdown.clickable-label(text="Dst IP/Port", size="sm", variant="default")
      b-dropdown-item(@click="exportUnique('ip.dst', 0)")
        | Export Unique Dst IP
      b-dropdown-item(@click="exportUnique('ip.dst', 1)")
        | Export Unique Dst IP with counts
      b-dropdown-item(@click="exportUnique('ip.dst:port.dst', 0)")
        | Export Unique Dst IP#{sep}Port
      b-dropdown-item(@click="exportUnique('ip.dst:port.dst', 1)")
        | Export Unique Dst IP#{sep}Port with counts
      b-dropdown-item(@click="openSpiGraph('ip.dst')")
        | Open Dst IPv6 SPI Graph
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('port.dst', 0)")
        | Export Unique Dst Port
      b-dropdown-item(@click="exportUnique('port.dst', 1)")
        | Export Unique Dst Port with counts
      b-dropdown-item(@click="openSpiGraph('port.dst')")
        | Open Dst Port SPI Graph
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('country.dst', 0)")
        | Export Unique Dst Country
      b-dropdown-item(@click="exportUnique('country.dst', 1)")
        | Export Unique Dst Country with counts
      b-dropdown-item(@click="openSpiGraph('country.dst')")
        | Open Dst Country SPI Graph
      b-dropdown-item(@click="fieldExists('country.dst', '==')")
        | Add Dst Country EXISTS! to query
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('destination.as.full', 0)")
        | Export Unique Dst ASN
      b-dropdown-item(@click="exportUnique('destination.as.full', 1)")
        | Export Unique Dst ASN with counts
      b-dropdown-item(@click="openSpiGraph('destination.as.full')")
        | Open Dst ASN SPI Graph
      b-dropdown-item(@click="fieldExists('destination.as.full', '==')")
        | Add Dst ASN EXISTS! to query
      b-dropdown-divider
      b-dropdown-item(@click="exportUnique('rir.dst', 0)")
        | Export Unique Dst RIR
      b-dropdown-item(@click="exportUnique('rir.dst', 1)")
        | Export Unique Dst RIR with counts
      b-dropdown-item(@click="openSpiGraph('rir.dst')")
        | Open Dst RIR SPI Graph
      b-dropdown-item(@click="fieldExists('rir.dst', '==')")
        | Add Dst RIR EXISTS! to query

  dd
    +ipPrint(session, session.destination.ip, session.destination.port, session.destination.geo.country_iso_code, session.destination.as.full, session.dstRIR, "dst")

  if (session.srcPayload8 || session.dstPayload8)
    dt
      b-dropdown.clickable-label(text="Payload8", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('payload8.src.hex', 0)")
          | Export Unique Src Payload8
        b-dropdown-item(@click="exportUnique('payload8.src.hex', 1)")
          | Export Unique Src Payload8 with counts
        b-dropdown-item(@click="openSpiGraph('payload8.src.hex')")
          | Open Src Payload8 SPI Graph
        b-dropdown-item(@click="fieldExists('payload8.src.hex', '==')")
          | Add Src Payload8 EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('payload8.dst.hex', 0)")
          | Export Unique Dst Payload8
        b-dropdown-item(@click="exportUnique('payload8.dst.hex', 1)")
          | Export Unique Dst Payload8 with counts
        b-dropdown-item(@click="openSpiGraph('payload8.dst.hex')")
          | Open Dst Payload8 SPI Graph
        b-dropdown-item(@click="fieldExists('payload8.dst.hex', '==')")
          | Add Dst Payload8 EXISTS! to query

    dd
      - function isprint(char) { return !( /[\x00-\x08\x0E-\x1F\x80-\xFF]/.test(char)); }
      - function printstr(str) { for (let char of str) { if (!isprint(char)) { char = '�'; } } return str; }
      if (session.srcPayload8)
        strong.medium.ml-1 Src
        - var srcPayload8a = new Buffer(session.srcPayload8, "hex").toString();
        +clickableValue('payload8.src.hex', session.srcPayload8)
        | ( #{printstr(srcPayload8a)} )
      if (session.dstPayload8)
        if (session.srcPayload8)
          strong.medium.ml-4 Dst
        else
          strong.medium Dst
        - var dstPayload8a = new Buffer(session.dstPayload8, "hex").toString();
        +clickableValue('payload8.dst.hex', session.dstPayload8)
        | ( #{printstr(dstPayload8a)} )

  div.tag-list
    +arrayList(session, "tags", "Tags", "tags", '<div @click="addTags()" v-b-tooltip title="Add a new tag to this session" class="btn btn-xs btn-theme-secondary ml-1"><span class="fa fa-plus-circle"></span></div>')

  if (session.fileId && session.fileId.length > 0)
    +arrayList(session, "fileId", "Files", "file")

  if (session.huntId && session.huntId.length > 0)
    +arrayList(session, "huntId", "Hunt Ids", "huntId")
  if (session.huntName && session.huntName.length > 0)
    +arrayList(session, "huntName", "Hunt Names", "huntName")

  if (session.scrubby)
    dt
      +clickableLabel('scrubbed.by', 'Scrubbed')
    dd
      div.mt-1.mb-1
        | By Moloch user #{session.scrubby} at #{new Date(session.scrubat)}

  if (session.socks)
    dt
      b-dropdown.clickable-label(text="Socks Dst", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('ip.socks', 0)")
          | Export Unique Socks Dst
        b-dropdown-item(@click="exportUnique('ip.socks', 1)")
          | Export Unique Socks Dst with counts
        b-dropdown-item(@click="openSpiGraph('ip.socks')")
          | Open Socks Dst SPI Graph
        b-dropdown-item(@click="fieldExists('ip.socks', '==')")
          | Add Socks Dst EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('port.socks', 0)")
          | Export Unique Socks Port
        b-dropdown-item(@click="exportUnique('port.socks', 1)")
          | Export Unique Socks Port with counts
        b-dropdown-item(@click="openSpiGraph('port.socks')")
          | Open Socks Port SPI Graph
        b-dropdown-item(@click="fieldExists('port.socks', '==')")
          | Add Socks Port EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('country.socks', 0)")
          | Export Unique Socks Country
        b-dropdown-item(@click="exportUnique('country.socks', 1)")
          | Export Unique Socks Country with counts
        b-dropdown-item(@click="openSpiGraph('country.socks')")
          | Open Socks Country SPI Graph
        b-dropdown-item(@click="fieldExists('country.socks', '==')")
          | Add Socks Country EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('socks.ip', 0)")
          | Export Unique Socks ASN
        b-dropdown-item(@click="exportUnique('socks.ip', 1)")
          | Export Unique Socks ASN with counts
        b-dropdown-item(@click="openSpiGraph('socks.ip')")
          | Open Socks ASN SPI Graph
        b-dropdown-item(@click="fieldExists('socks.ip', '==')")
          | Add Socks ASN EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('rir.socks', 0)")
          | Export Unique Socks RIR
        b-dropdown-item(@click="exportUnique('rir.socks', 1)")
          | Export Unique Socks RIR with counts
        b-dropdown-item(@click="openSpiGraph('rir.socks')")
          | Open Socks RIR SPI Graph
        b-dropdown-item(@click="fieldExists('rir.socks', '==')")
          | Add Socks RIR EXISTS! to query

    dd
      +ipPrint(session, session.socks.ip, session.socks.port, session.socks.GEO, session.socks.ASN, session.socks.RIR, "socks")

    dt
      b-dropdown.clickable-label(text="Socks Host", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('host.socks', 0)")
          | Export Unique Socks Host
        b-dropdown-item(@click="exportUnique('host.socks', 1)")
          | Export Unique Socks Host with counts
        b-dropdown-item(@click="openSpiGraph('host.socks')")
          | Open Socks Host SPI Graph
        b-dropdown-item(@click="fieldExists('host.socks', '==')")
          | Add Socks Host EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('port.socks', 0)")
          | Export Unique Socks Port
        b-dropdown-item(@click="exportUnique('port.socks', 1)")
          | Export Unique Socks Port with counts
        b-dropdown-item(@click="openSpiGraph('port.socks')")
          | Open Socks Port SPI Graph
        b-dropdown-item(@click="fieldExists('port.socks', '==')")
          | Add Socks Port EXISTS! to query

    dd
      +clickableValue('host.socks', session.socks.host)
      | :
      +clickableValue('port.socks', session.socks.port)

    if (session.socks.user)
      dt
        +clickableLabel('socks.user', 'Socks User')
      dd
        +clickableValue('socks.user', session.socks.user)

  if (session.gre)
    +ipArrayList(session.gre.ip, "ip", "GRE IPs", "gre.ip")

  if (session.tcpflags)
    dt
      b-dropdown.clickable-label(text="TCP Flags", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('tcpflags.syn', 0)")
          | Export Unique SYN
        b-dropdown-item(@click="exportUnique('tcpflags.syn', 1)")
          | Export Unique SYN with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.syn')")
          | Open SYN SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.syn', '==')")
          | Add SYN EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('tcpflags.syn-ack', 0)")
          | Export Unique SYN-ACK
        b-dropdown-item(@click="exportUnique('tcpflags.syn-ack', 1)")
          | Export Unique SYN-ACK with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.syn-ack')")
          | Open SYN-ACK SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.syn-ack', '==')")
          | Add SYN-ACK EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('tcpflags.ack', 0)")
          | Export Unique ACK
        b-dropdown-item(@click="exportUnique('tcpflags.ack', 1)")
          | Export Unique ACK with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.ack')")
          | Open ACK SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.ack', '==')")
          | Add ACK EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('tcpflags.psh', 0)")
          | Export Unique PSH
        b-dropdown-item(@click="exportUnique('tcpflags.psh', 1)")
          | Export Unique PSH with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.psh')")
          | Open PSH SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.psh', '==')")
          | Add PSH EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('tcpflags.rst', 0)")
          | Export Unique RST
        b-dropdown-item(@click="exportUnique('tcpflags.rst', 1)")
          | Export Unique RST with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.rst')")
          | Open RST SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.rst', '==')")
          | Add RST EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('tcpflags.fin', 0)")
          | Export Unique FIN
        b-dropdown-item(@click="exportUnique('tcpflags.fin', 1)")
          | Export Unique FIN with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.fin')")
          | Open FIN SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.fin', '==')")
          | Add FIN EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('tcpflags.urg', 0)")
          | Export Unique URG
        b-dropdown-item(@click="exportUnique('tcpflags.urg', 1)")
          | Export Unique URG with counts
        b-dropdown-item(@click="openSpiGraph('tcpflags.urg')")
          | Open URG SPI Graph
        b-dropdown-item(@click="fieldExists('tcpflags.urg', '==')")
          | Add URG EXISTS! to query
    dd
      strong.medium.ml-1 SYN
      +clickableValue('tcpflags.syn', session.tcpflags.syn)
      strong.medium.ml-4 SYN-ACK
      +clickableValue('tcpflags.syn-ack', session.tcpflags['syn-ack'])
      strong.medium.ml-4 ACK
      +clickableValue('tcpflags.ack', session.tcpflags.ack)
      strong.medium.ml-4 PSH
      +clickableValue('tcpflags.psh', session.tcpflags.psh)
      strong.medium.ml-4 RST
      +clickableValue('tcpflags.rst', session.tcpflags.rst)
      strong.medium.ml-4 FIN
      +clickableValue('tcpflags.fin', session.tcpflags.fin)
      strong.medium.ml-4 URG
      +clickableValue('tcpflags.urg', session.tcpflags.urg)

  if (session.icmp)
    dt
      b-dropdown.clickable-label(text="ICMP", size="sm", variant="default")
        b-dropdown-item(@click="exportUnique('icmp.type', 0)")
          | Export Unique ICMP Type
        b-dropdown-item(@click="exportUnique('icmp.type', 1)")
          | Export Unique ICMP Type with counts
        b-dropdown-item(@click="fieldExists('icmp.type', '==')")
          | Add ICMP Type EXISTS! to query
        b-dropdown-divider
        b-dropdown-item(@click="exportUnique('icmp.code', 0)")
          | Export Unique ICMP Code
        b-dropdown-item(@click="exportUnique('icmp.code', 1)")
          | Export Unique ICMP Code with counts
        b-dropdown-item(@click="fieldExists('icmp.code', '==')")
          | Add ICMP Code EXISTS! to query
    dd
      strong.medium.ml-1 Type
      +arrayPrint(session.icmp, "type", "icmp.type")
      strong.medium.ml-4 Code
      +arrayPrint(session.icmp, "code", "icmp.code")

  if (session.srcDscp || session.dstDscp)
    dt
      b-dropdown.clickable-label(text="DSCP", size="sm", variant="default")
        if (session.srcDscp)
          b-dropdown-item(@click="exportUnique('dscp.src', 0)")
            | Export Unique DSCP Src
          b-dropdown-item(@click="exportUnique('dscp.src', 1)")
            | Export Unique DSCP Src with counts
        if (session.dstDscp)
          b-dropdown-item(@click="exportUnique('dscp.dst', 0)")
            | Export Unique DSCP Dst
          b-dropdown-item(@click="exportUnique('dscp.dst', 1)")
            | Export Unique DSCP Dst with counts
    dd
      if (session.srcDscp)
        strong.medium.ml-1 Src
        +arrayPrint(session, "srcDscp", "dscp.src")
      if (session.dstDscp)
        strong.medium.ml-4 Dst
        +arrayPrint(session, "dstDscp", "dscp.dst")

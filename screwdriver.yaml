annotations:
    screwdriver.cd/restrictPR: fork

shared:
    annotations:
        screwdriver.cd/cpu: HIGH
        screwdriver.cd/ram: HIGH

    environment:
        MOLOCH_COPY_BRANCH: "origin/dev5"
        MOLOCH_FILE_NAME: "dev5"
        ARKIME_FILE_NAME: "dev5"
        GIT_SHALLOW_CLONE: false
        ASAN_OPTIONS: "fast_unwind_on_malloc=0"
        RELEASE_ITERATION: 1

jobs:
    centos-7:
        requires: [~pr, ~commit]
        image: andywick/arkime-build-7:5.0.0-3
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: scl enable devtoolset-9 rh-python36 "./easybutton-build.sh --daq --kafka --rminstall"
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: scl enable devtoolset-9 rh-python36 'make install'
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_" `
                scl enable rh-ruby26 'fpm -s dir -t rpm -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml-devel -d perl-LWP-Protocol-https /opt/arkime'
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  scl enable devtoolset-9 rh-python36 'aws s3 cp arkime*.x86_64.rpm s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}.centos7.x86_64.rpm --acl public-read'
                  scl enable devtoolset-9 rh-python36 'aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}.centos7.x86_64.rpm --acl public-read'
                fi
            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                scl enable devtoolset-9 rh-python36 "./easybutton-build.sh --daq --kafka --dir /data/moloch"
                scl enable devtoolset-9 rh-python36 "cd capture ; make clean; make; make install"
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                scl enable rh-ruby26 'fpm -s dir -t rpm -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml-devel -d perl-LWP-Protocol-https /data/moloch'
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  scl enable devtoolset-9 rh-python36 'aws s3 cp moloch*.x86_64.rpm s3://files.molo.ch/moloch-${MOLOCH_FILE_NAME}.centos7.x86_64.rpm --acl public-read'
                  scl enable devtoolset-9 rh-python36 'aws s3api put-object-acl --bucket files.molo.ch --key moloch-${MOLOCH_FILE_NAME}.centos7.x86_64.rpm --acl public-read'
                fi
            - install-arkime: yum -y install arkime*.x86_64.rpm
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    centos-8:
        requires: [~commit]
        image: andywick/arkime-build-8:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - test-ui: npm run test
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
                fpm -s dir -t rpm -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https --rpm-rpmbuild-define "_build_id_links none" /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*.x86_64.rpm s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}.centos8.x86_64.rpm --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}.centos8.x86_64.rpm --acl public-read
                fi
            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                ./easybutton-build.sh --daq --pfring --kafka --dir /data/moloch
                (cd capture ; make clean; make; make install)
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                fpm -s dir -t rpm -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https --rpm-rpmbuild-define "_build_id_links none" /data/moloch
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet moloch*.x86_64.rpm s3://files.molo.ch/moloch-${MOLOCH_FILE_NAME}.centos8.x86_64.rpm --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key moloch-${MOLOCH_FILE_NAME}.centos8.x86_64.rpm --acl public-read
                fi
            - install-arkime: yum -y install arkime*.x86_64.rpm
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    el-9:
        requires: [~pr,~commit]
        image: andywick/arkime-build-9:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - test-ui: npm run test
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
                fpm -s dir -t rpm --rpm-digest sha256 -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https --rpm-rpmbuild-define "_build_id_links none" /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*.x86_64.rpm s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}.el9.x86_64.rpm --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}.el9.x86_64.rpm --acl public-read
                fi
            - install-arkime: yum -y install arkime*.x86_64.rpm
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    al2023:
        requires: [~pr,~commit]
        image: andywick/arkime-build-al2023:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
                fpm -s dir -t rpm --rpm-digest sha256 -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https --rpm-rpmbuild-define "_build_id_links none" /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*.x86_64.rpm s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}.al2023.x86_64.rpm --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}.al2023.x86_64.rpm --acl public-read
                fi
            - install-arkime: yum -y install arkime*.x86_64.rpm
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    ubuntu-18:
        requires: [~pr,~commit]
        image: andywick/arkime-build-18:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - apt-get update
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*amd64.deb s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}_ubuntu18_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}_ubuntu18_amd64.deb --acl public-read
                fi

            - build-sanitize: (cd capture; make SANITIZE_LDFLAGS='-fno-common -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer' sanitize)
            - install-sanitize: (cd capture; make install)
            - build-sanitize-package: |
                rm -f arkime*amd64.deb
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*amd64.deb s3://files.molo.ch/sanitize/arkime-${ARKIME_FILE_NAME}_ubuntu18_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key sanitize/arkime-${ARKIME_FILE_NAME}_ubuntu18_amd64.deb --acl public-read
                fi

            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                ./easybutton-build.sh --daq --pfring --kafka --dir /data/moloch
                (cd capture ; make clean; make; make install)
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                fpm -s dir -t deb -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev /data/moloch
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet moloch*amd64.deb s3://files.molo.ch/moloch-${MOLOCH_FILE_NAME}_ubuntu18_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key moloch-${MOLOCH_FILE_NAME}_ubuntu18_amd64.deb --acl public-read
                fi

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    ubuntu-20:
        requires: [~commit]
        image: andywick/arkime-build-20:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - apt-get update
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev  /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*amd64.deb s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}_ubuntu20_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}_ubuntu20_amd64.deb --acl public-read
                fi

            - build-sanitize: (cd capture; make SANITIZE_LDFLAGS='-fno-common -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer' sanitize)
            - install-sanitize: (cd capture; make install)
            - build-sanitize-package: |
                rm -f arkime*amd64.deb
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev  /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*amd64.deb s3://files.molo.ch/sanitize/arkime-${ARKIME_FILE_NAME}_ubuntu20_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key sanitize/arkime-${ARKIME_FILE_NAME}_ubuntu20_amd64.deb --acl public-read
                fi

            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                ./easybutton-build.sh --daq --pfring --kafka --dir /data/moloch
                (cd capture ; make clean; make; make install)
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                fpm -s dir -t deb -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --url "https://moloch.com" --description "Moloch Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev  /data/moloch
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet moloch*amd64.deb s3://files.molo.ch/moloch-${MOLOCH_FILE_NAME}_ubuntu20_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key moloch-${MOLOCH_FILE_NAME}_ubuntu20_amd64.deb --acl public-read
                fi

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    ubuntu-22:
        requires: [~pr, ~commit]
        image: andywick/arkime-build-22:5.0.0-2
        steps:
            - apt-get update
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --nothirdparty --pfring --kafka --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev -d liblua5.4-0 -d libmaxminddb0 -d libcurl4 -d libpcap0.8 -d libglib2.0-0 -d libnghttp2-14 -d libyara8 -d librdkafka1 /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp arkime*amd64.deb s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}_ubuntu22_amd64.deb --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}_ubuntu22_amd64.deb --acl public-read
                fi

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    arch:
        requires: [~pr, ~commit]
        image: andywick/arkime-build-arch:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - build: ./easybutton-build.sh --rminstall --kafka
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:$PATH
            - installing: make install
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - run-es: (chown -R opensearch /opensearch-2.7.0; cd /opensearch-2.7.0 ; su opensearch -c "ES_JAVA_OPTS='-Xms1000m -Xmx1000m' bin/opensearch" > /tmp/os &)
            - sleep 30
            - cat /tmp/os
            - test-viewer: (cd tests ; G_SLICE=always-malloc ./tests.pl --viewer)
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                /root/.local/share/gem/ruby/3.0.0/bin/fpm -s dir -t pacman -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libmaxminddb -d libpcap -d yara -d perl-http-message -d perl-lwp-protocol-https -d perl-json -d libnet -d lua -d zstd -d openssl-1.1 -d pcre /opt/arkime
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  aws s3 cp --quiet arkime*x86_64.pkg.tar.zst s3://files.molo.ch/arkime-${ARKIME_FILE_NAME}_arch.x86_64.pkg.tar.zst --acl public-read
                  aws s3api put-object-acl --bucket files.molo.ch --key arkime-${ARKIME_FILE_NAME}_arch.x86_64.pkg.tar.zst --acl public-read
                fi

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    alpine:
        requires: [~pr, ~commit]
        image: alpine:3.14
        steps:
            - apk add --no-cache curl bash sudo git
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - build: ./easybutton-build.sh --rminstall --kafka
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:$PATH
            - installing: make install
            - linting: npm run lint

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    centos-7-sanitize:
        annotations:
            screwdriver.cd/cpu: TURBO
            screwdriver.cd/ram: TURBO
        requires: [~pr, ~commit]
        image: andywick/arkime-build-7:5.0.0-3
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: scl enable devtoolset-9 rh-python36 "./easybutton-build.sh --daq --kafka --rminstall --dir /data/moloch"
            - yum -y install libasan-static devtoolset-9-libasan-devel libasan4 devtoolset-9-libubsan-devel libubsan which
            - build-sanitize: (cd capture; scl enable devtoolset-9 rh-python36 "make SANITIZE_LDFLAGS='-fno-common -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer' sanitize")
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/data/moloch/bin:$PATH
            - installing: INSTALL_BUNDLE=bundle scl enable devtoolset-9 rh-python36 'make install'
            - linting: npm run lint
            - cp -r capture/plugins/lua/samples /data/moloch/lua
            - run-es: (chown -R opensearch /opensearch-2.3.0; cd /opensearch-2.3.0 ; su opensearch -c "ES_JAVA_OPTS='-Xms1000m -Xmx1000m' bin/opensearch" > /tmp/os &)
            - sleep 30
            - cat /tmp/os
            - test-viewer: (cd tests ; G_SLICE=always-malloc ./tests.pl --viewer)
            - build-package: |
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                mv /data/moloch/bin/arkime_update_geo.sh /data/moloch/bin/moloch_update_geo.sh

                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /data/moloch/common/version.js | head -n 1 | tr "-" "_"`
                scl enable rh-ruby26 'fpm -s dir -t rpm -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $SD_BUILD_ID --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml-devel -d libasan-static -d libubsan1 -d libasan5 -d perl-LWP-Protocol-https /data/moloch'
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  scl enable devtoolset-9 rh-python36 'aws s3 cp --quiet moloch*.x86_64.rpm s3://files.molo.ch/sanitize/moloch-${MOLOCH_FILE_NAME}.centos7.x86_64.rpm --acl public-read'
                  scl enable devtoolset-9 rh-python36 'aws s3api put-object-acl --bucket files.molo.ch --key sanitize/moloch-${MOLOCH_FILE_NAME}.centos7.x86_64.rpm --acl public-read'
                fi
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    slack:
        requires: [centos-7, centos-7-sanitize, centos-8, el-9, ubuntu-18, ubuntu-20, ubuntu-22]
        image: andywick/arkime-build-7:5.0.0-2
        annotations:
            beta.screwdriver.cd/cpu: LOW
            beta.screwdriver.cd/ram: LOW
        steps:
            - slack-success: |
                export ARKIME_VERSION=`grep AC_INIT configure.ac | sed "s/.*\[\(.*\)\].*$/\1/"`
                echo ARKIME_VERSION: $ARKIME_VERSION
                if [ "$GIT_BRANCH" = "$MOLOCH_COPY_BRANCH" ]; then
                  MSG=`git log -1 --format=%s`
                  BODY="{\"icon_emoji\": \":sushi:\", \"username\": \"MolochBuild\", \"text\":\"It worked: $GIT_BRANCH - arkime-$ARKIME_VERSION-$SD_BUILD_ID - $MSG\"}"
                  curl -XPOST -H "Content-type: application/json" --data "$BODY" $SLACK
                fi
        secrets:
            - SLACK

    release-build:
        image: andywick/arkime-build-7:5.0.0-3
        requires: []
        annotations:
            beta.screwdriver.cd/cpu: LOW
            beta.screwdriver.cd/ram: LOW
        steps:
            - echo "Hi!"

    release-centos-7:
        requires: [release-build]
        image: andywick/arkime-build-7:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: scl enable devtoolset-9 rh-python36 "./easybutton-build.sh --daq --kafka --rminstall"
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH:$PWD/node_modules/.bin
            - installing: scl enable devtoolset-9 rh-python36 'make install'
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_" `
                scl enable rh-ruby26 'fpm -s dir -t rpm -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml-devel -d perl-LWP-Protocol-https /opt/arkime'
                scl enable devtoolset-9 rh-python36 'aws s3 cp arkime-${ARKIME_VERSION}-${RELEASE_ITERATION}.x86_64.rpm s3://files.molo.ch/builds/centos-7/ --acl public-read'
            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                scl enable devtoolset-9 rh-python36 "./easybutton-build.sh --daq --kafka --dir /data/moloch"
                scl enable devtoolset-9 rh-python36 "cd capture ; make clean; make; make install"
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/
                scl enable rh-ruby26 'fpm -s dir -t rpm -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml-devel -d perl-LWP-Protocol-https /data/moloch'
                scl enable devtoolset-9 rh-python36 'aws s3 cp moloch-${ARKIME_VERSION}-${RELEASE_ITERATION}.x86_64.rpm s3://files.molo.ch/builds/centos-7/ --acl public-read'
            - ls -l *.rpm
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-centos-8:
        requires: [release-build]
        image: andywick/arkime-build-8:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH:$PWD/node_modules/.bin
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
                fpm -s dir -t rpm -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https /opt/arkime
                aws s3 cp arkime-${ARKIME_VERSION}-${RELEASE_ITERATION}.x86_64.rpm s3://files.molo.ch/builds/centos-8/ --acl public-read
            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                ./easybutton-build.sh --daq --pfring --kafka --dir /data/moloch
                (cd capture ; make clean; make; make install)
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                fpm -s dir -t rpm -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https /data/moloch
                aws s3 cp moloch-${ARKIME_VERSION}-${RELEASE_ITERATION}.x86_64.rpm s3://files.molo.ch/builds/centos-8/ --acl public-read
            - ls -l *.rpm

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-el-9:
        requires: [release-build]
        image: andywick/arkime-build-9:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH:$PWD/node_modules/.bin
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
                fpm -s dir -t rpm --rpm-digest sha256 -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https /opt/arkime
                aws s3 cp arkime-${ARKIME_VERSION}-${RELEASE_ITERATION}.x86_64.rpm s3://files.molo.ch/builds/el-9/ --acl public-read
            - ls -l *.rpm

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-ubuntu-18:
        requires: [release-build]
        image: andywick/arkime-build-18:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - apt-get update
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH:$PWD/node_modules/.bin
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev /opt/arkime
                aws s3 cp arkime_${ARKIME_VERSION}-${RELEASE_ITERATION}_amd64.deb s3://files.molo.ch/builds/ubuntu-18.04/ --acl public-read

            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                ./easybutton-build.sh --daq --pfring --kafka --dir /data/moloch
                (cd capture ; make clean; make; make install)
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                fpm -s dir -t deb -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --url "https://arkime.com" --description "Moloch Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev /data/moloch
                aws s3 cp moloch_${ARKIME_VERSION}-${RELEASE_ITERATION}_amd64.deb s3://files.molo.ch/builds/ubuntu-18.04/ --acl public-read
            - ls -l *.deb
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-ubuntu-20:
        requires: [release-build]
        image: andywick/arkime-build-20:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - apt-get update
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH:$PWD/node_modules/.bin
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev  /opt/arkime
                aws s3 cp arkime_${ARKIME_VERSION}-${RELEASE_ITERATION}_amd64.deb s3://files.molo.ch/builds/ubuntu-20.04/ --acl public-read

            - build-moloch-package: |
                rm -rf /data/moloch; mkdir -p /data
                mv /opt/arkime /data/moloch
                ./easybutton-build.sh --daq --pfring --kafka --dir /data/moloch
                (cd capture ; make clean; make; make install)
                (cd release ; make installmoloch)
                mv /data/moloch/bin/capture /data/moloch/bin/moloch-capture
                /bin/cp -f common/version.js /data/moloch/common/

                fpm -s dir -t deb -n moloch -x data/moloch/logs -x data/moloch/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --url "https://moloch.com" --description "Moloch Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev  /data/moloch
                aws s3 cp moloch_${ARKIME_VERSION}-${RELEASE_ITERATION}_amd64.deb s3://files.molo.ch/builds/ubuntu-20.04/ --acl public-read
            - ls -l *.deb
        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-ubuntu-22:
        requires: [release-build]
        image: andywick/arkime-build-22:5.0.0-2
        steps:
            - apt-get update
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --nothirdparty --pfring --kafka --rminstall
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                fpm -s dir -t deb -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libwww-perl -d libjson-perl -d ethtool -d libyaml-dev -d liblua5.4-0 -d libmaxminddb0 -d libcurl4 -d libpcap0.8 -d libglib2.0-0 -d libnghttp2-14 -d libyara8  -d librdkafka1 /opt/arkime
                aws s3 cp arkime_${ARKIME_VERSION}-${RELEASE_ITERATION}_amd64.deb s3://files.molo.ch/builds/ubuntu-22.04/ --acl public-read

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-arch:
        requires: [release-build]
        image: andywick/arkime-build-arch:5.0.0-3
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - build: ./easybutton-build.sh --rminstall
            - test-capture: (cd tests ; ./tests.pl)
            - export PATH=/opt/arkime/bin:$PATH:$PWD/node_modules/.bin
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1`
                /root/.local/share/gem/ruby/3.0.0/bin/fpm -s dir -t pacman -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d libmaxminddb -d libpcap -d yara -d perl-http-message -d perl-lwp-protocol-https -d perl-json -d libnet -d lua -d zstd -d openssl-1.1 -d pcre /opt/arkime
                aws s3 cp --quiet arkime*x86_64.pkg.tar.zst s3://files.molo.ch/builds/arch/arkime-${ARKIME_VERSION}-${RELEASE_ITERATION}_arch.x86_64.pkg.tar.zst --acl public-read
            - ls -l *.zst

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

    release-al2023:
        requires: [release-build]
        image: andywick/arkime-build-al2023:5.0.0-2
        steps:
            - (cd / ; curl https://s3.amazonaws.com/files.molo.ch/snfmin.tar.gz | tar -zxvf -)
            - ln -s /thirdparty .
            - build: ./easybutton-build.sh --daq --pfring --kafka --rminstall
            - export PATH=/opt/arkime/bin:/data/moloch/bin:$PATH:$PWD/node_modules/.bin
            - installing: make install
            - cp -r capture/plugins/lua/samples /opt/arkime/lua
            - npm install license-checker; release/notice.txt.pl /opt/arkime NOTICE release/CAPTURENOTICE > /opt/arkime/NOTICE.txt
            - build-package: |
                export ARKIME_VERSION=`sed 's/.*"\(.*\)\".*$/\1/' /opt/arkime/common/version.js | head -n 1 | tr "-" "_"`
                fpm -s dir -t rpm --rpm-digest sha256 -n arkime -x opt/arkime/logs -x opt/arkime/raw -v $ARKIME_VERSION --iteration $RELEASE_ITERATION --template-scripts --after-install "release/afterinstall.sh" --url "https://arkime.com" --description "Arkime Full Packet System" -d perl-libwww-perl -d perl-JSON -d ethtool -d libyaml -d perl-LWP-Protocol-https --rpm-rpmbuild-define "_build_id_links none" /opt/arkime
                aws s3 cp arkime-${ARKIME_VERSION}-${RELEASE_ITERATION}.x86_64.rpm s3://files.molo.ch/builds/al2023/ --acl public-read
            - ls -l *.rpm

        secrets:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY

